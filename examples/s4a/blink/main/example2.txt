cmake_minimum_required(VERSION 3.16)
project(SwiftCustomBuildChain)

# Paths for Swift and LLVM
find_program(SWIFTC swiftc REQUIRED)

set(BC_DIR "${CMAKE_BINARY_DIR}/bitcode")
set(OBJ_DIR "${CMAKE_BINARY_DIR}/objects")
set(EXE_FILE "${CMAKE_BINARY_DIR}/myprogram")

# Ensure output directories exist
file(MAKE_DIRECTORY ${BC_DIR})
file(MAKE_DIRECTORY ${OBJ_DIR})

# List of Swift source files
set(SWIFT_SOURCES main.swift utils.swift)

set(BC_FILES "")
set(OBJ_FILES "")

# Step 1 & 2: Compile Swift to LLVM bitcode and object files
foreach(SRC_FILE ${SWIFT_SOURCES})
    # Extract filename without extension
    get_filename_component(FNAME ${SRC_FILE} NAME_WE)

    # Define bitcode and object file paths
    set(BC_FILE "${BC_DIR}/${FNAME}.bc")
    set(OBJ_FILE "${OBJ_DIR}/${FNAME}.o")

    # Compile Swift to LLVM bitcode
    add_custom_command(
        OUTPUT ${BC_FILE}
        COMMAND ${SWIFTC} -emit-bc ${CMAKE_SOURCE_DIR}/${SRC_FILE} -o ${BC_FILE}
        DEPENDS ${SRC_FILE}
        COMMENT "Generating LLVM bitcode for ${SRC_FILE}"
    )

    # Convert LLVM bitcode to object file
    add_custom_command(
        OUTPUT ${OBJ_FILE}
        COMMAND llc ${BC_FILE} -filetype=obj -o ${OBJ_FILE}
        DEPENDS ${BC_FILE}
        COMMENT "Converting ${BC_FILE} to object file"
    )

    # Collect output files
    list(APPEND BC_FILES ${BC_FILE})
    list(APPEND OBJ_FILES ${OBJ_FILE})
endforeach()

# Step 3: Link object files to create the executable
add_custom_command(
    OUTPUT ${EXE_FILE}
    COMMAND clang ${OBJ_FILES} -o ${EXE_FILE} -lc++
    DEPENDS ${OBJ_FILES}
    COMMENT "Linking object files to create ${EXE_FILE}"
)

# Create a custom target to trigger the full chain
add_custom_target(swift_build_chain ALL
    DEPENDS ${EXE_FILE}
    COMMENT "Running the full custom Swift build chain..."
)

# Optional: Install the executable
install(PROGRAMS ${EXE_FILE} DESTINATION bin)
